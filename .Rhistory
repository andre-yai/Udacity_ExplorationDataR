yo <- read.csv('yogurt.csv')
str(yo)
# change the id from an int to a factor
yo$id <- factor(yo$id)
str(yo)
ggplot(aes(x=price),data= yo)+
geom_histogram()
library(ggplot2)
library(ggthemes)
install.packages('ggthemes', dependencies = TRUE)
ggplot(aes(x=price),data= yo)+
geom_histogram()
yo <- read.csv('yogurt.csv')
str(yo)
# change the id from an int to a factor
yo$id <- factor(yo$id)
str(yo)
yo.head()
yo = transform(yo,all.purchase =  strawberry + blueberry + pina.colada + plain + mixed.berry);
summary(yo$all.purchase)
names(yo)
ggplot(aes(y=price/all.purchase,x=time),data = yo) + geom_jitter(alpha = 1/4, shape = 21)
getwd()
getwd()
election_Ny <- read.csv('2016_election_NY.csv')
getwd()
WhiteWine <- read.csv('wineQualityWhites.csv')
getwd()
WhiteWines <- read.csv('wineQualityWhites.csv')
str(WhiteWines)
plot(WhiteWines)
summary(WhiteWines)
shape(WhiteWines)
shape(WhiteWines)
getwd()
WhiteWines <- read.csv('wineQualityWhites.csv')
shape(WhiteWines)
shape(WhiteWines)
shape(WhiteWines)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
install.packages('GGally')
install.packages('scales')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
library(ggplot2)
library(GGally)
library(scales)
library(gridExtra)
view(WhiteWines)
View(WhiteWines)
dim(WhiteWines)
names(WhiteWines)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
install.packages('GGally')
install.packages('scales')
install.packages('lattice')
install.packages("scales")
install.packages("GGally")
install.packages('MASS')
install.packages("GGally")
head(WhiteWine,n=10)
summary(WhiteWines)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
install.packages('GGally')
install.packages('scales')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
library(ggplot2)
library(GGally)
library(scales)
library(gridExtra)
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
WineQuality <- table(WhiteWines$quality)
barplot(WineQuality, main="Wine Distribution", xlab="Number of Wines")
WineQuality <- table(WhiteWines$quality)
barplot(WineQuality, main="Wine Quality Distribution", xlab="Number of Wines")
source('~/.active-rstudio-document', echo=TRUE)
qplot(x= alcohol, data=WhiteWines)
qplot(x = alcohol, data = WhiteWines)
summary(WhiteWines$alcohol)
qplot(x = residual.sugar, data = WhiteWines)
summary(WhiteWine$residual.sugar)
summary(WhiteWines$residual.sugar)
WhiteWines$residual.sugar > 20
subset(WhiteWines$residual.sugar > 20)
WhiteWines[(WhiteWines$residual.sugar > 20),]
WhiteWines[(WhiteWines$residual.sugar > 20),]$residual.sugar
sort(WhiteWines[(WhiteWines$residual.sugar > 20),]$residual.sugar)
WhiteWines[(WhiteWines$quality > 8)]
WhiteWines[(WhiteWines$quality > 8),]
WhiteWines[(WhiteWines$quality > 8),]$quality
WhiteWines[(WhiteWines$quality > 8),]
qplot(x = total.sulfur.dioxide, data = WhiteWines)
summary(WhiteWines$total.sulfur.dioxide)
qplot(x = free.sulfur.dioxide, data = WhiteWines)
summary(WhiteWines$free.sulfur.dioxide)
qqplot(x=ph, data=WhiteWines)
qplot(x=pH, data=WhiteWines)
summary(WhiteWines$pH)
qplot(x=density,data=WhiteWines)
summary(WhiteWines$density)
summary(WhiteWines$density)
qplot(x=chorides,data=WhiteWines)
qplot(x=Chorides,data=WhiteWines)
qplot(x=Cholrides,data=WhiteWines)
qplot(x=Chlorides,data=WhiteWines)
qplot(x=chlorides,data=WhiteWines)
summary(WhiteWines$chlorides)
qplot(x=fixed.acidity,data=WhiteWines)
summary(WhiteWines$fixed.acidity)
qplot(x=volate.acidity,data=WhiteWines)
qplot(x=volative.acidity,data=WhiteWines)
qplot(x=volatile.acidity,data=WhiteWines)
qplot(x=citric.acidity,data=WhiteWines)
qplot(x=citric.acid,data=WhiteWines)
qplot(x=fixed.acidity,data=WhiteWines)
summary(WhiteWines$fixed.acidity)
summary(WhiteWines$volatile.acidity)
summary(WhiteWines$citric.acidity)
summary(WhiteWines$citric.acid)
WhiteWines$acid <- WhiteWines$citric.acid + WhiteWines$fixed.acidity + WhiteWines$volatile.acidity
qplot(x=acid,data=WhiteWines)
summary(x=acid,data=WhiteWines)
summary(x=acid,data=WhiteWines)
summary(WhiteWines$acid)
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
#install.packages('GGally')
#install.packages('scales')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape')
#install.packages('plyr')
library(ggplot2)
library(GGally)
library(scales)
# Load the Data
WhiteWines <- read.csv('wineQualityWhites.csv')
dim(WhiteWines[(WhiteWines$residual.sugar < 0),]$residual.sugar)
dim(WhiteWines[(WhiteWines$residual.sugar < 1),]$residual.sugar)
WhiteWines[(WhiteWines$residual.sugar < 1),]$residual.sugar
count(WhiteWines[(WhiteWines$residual.sugar < 1),]$residual.sugar)
dim(WhiteWines[(WhiteWines$residual.sugar < 1),])
length(WhiteWines[(WhiteWines$residual.sugar < 1),]$residual.sugar)
length(WhiteWines[(WhiteWines$residual.sugar < 1),]$residual.sugar)
length(WhiteWines[(WhiteWines$residual.sugar > 45),]$residual.sugar)
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
#install.packages('GGally')
#install.packages('scales')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape')
#install.packages('plyr')
library(ggplot2)
library(GGally)
library(scales)
# Load the Data
WhiteWines <- read.csv('wineQualityWhites.csv')
dim(WhiteWines)
names(WhiteWines)
head(WhiteWines,n=10)
summary(WhiteWines)
WineQuality <- table(WhiteWines$quality)
barplot(WineQuality, main="Wine Quality Distribution", xlab="Number of Wines")
qplot(x = alcohol, data = WhiteWines)
summary(WhiteWines$alcohol)
qplot(x = residual.sugar, data = WhiteWines)
summary(WhiteWines$residual.sugar)
length(WhiteWines[(WhiteWines$residual.sugar < 1),]$residual.sugar)
length(WhiteWines[(WhiteWines$residual.sugar > 45),]$residual.sugar)
qplot(x = total.sulfur.dioxide, data = WhiteWines)
summary(WhiteWines$total.sulfur.dioxide)
qplot(x = free.sulfur.dioxide, data = WhiteWines)
summary(WhiteWines$free.sulfur.dioxide)
qplot(x=pH, data=WhiteWines)
summary(WhiteWines$pH)
qplot(x=density,data=WhiteWines)
summary(WhiteWines$density)
qplot(x=chlorides,data=WhiteWines)
summary(WhiteWines$chlorides)
qplot(x=fixed.acidity,data=WhiteWines)
summary(WhiteWines$fixed.acidity)
qplot(x=volatile.acidity,data=WhiteWines)
summary(WhiteWines$volatile.acidity)
qplot(x=citric.acid,data=WhiteWines)
summary(WhiteWines$citric.acid)
WhiteWines$acid <- WhiteWines$citric.acid + WhiteWines$fixed.acidity + WhiteWines$volatile.acidity
qplot(x=acid,data=WhiteWines)
summary(WhiteWines$acid)
length(WhiteWines[(WhiteWines$total.sulfur.dioxide > 50),])
length(WhiteWines[(WhiteWines$total.sulfur.dioxide > 50),])
$total.sulfur.dioxide)
summary(WhiteWines$total.sulfur.dioxide)
length(WhiteWines[(WhiteWines$total.sulfur.dioxide > 50),])/length(WhiteWines)
length(WhiteWines[(WhiteWines$total.sulfur.dioxide > 50),])
length(WhiteWines)
length(WhiteWines[(WhiteWines$total.sulfur.dioxide > 50),])
length(WhiteWines)
dim(WhiteWines)
dim(WhiteWines)
dim(WhiteWines)
dim(WhiteWines)
length(WhiteWines[(WhiteWines$total.sulfur.dioxide > 50),])
```{r}
WhiteWines[(WhiteWines$total.sulfur.dioxide > 50),]
WhiteWines[(WhiteWines$total.sulfur.dioxide > 50),]$total.sulfur.dioxide
length(WhiteWines[(WhiteWines$total.sulfur.dioxide > 50),]$total.sulfur.dioxide)
dim(WhiteWines)
length(WhiteWines[(WhiteWines$total.sulfur.dioxide > 50),]$total.sulfur.dioxide)
dim(WhiteWines)
length(WhiteWines[(WhiteWines$total.sulfur.dioxide > 50),]$total.sulfur.dioxide)
length(WhiteWines[(WhiteWines$total.sulfur.dioxide > 50),]$total.sulfur.dioxide)/length(WhiteWines$total.sulfur.dioxide)
qplot(x=chlorides,data=WhiteWines)
qplot(x=sulphates,data=WhiteWines)
summary(WhiteWines$chlorides)
summary(WhiteWines$sulphates)
ggpairs(WhiteWines)
pairs.panels(WhiteWines,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
pairs.panels(White,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
library(psych)
```{r echo=FALSE, Bivariate_Plots}
install.packages('psych')
install.packages("psych")
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
library(psych)
pairs.panels(White,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
library(psych)
pairs.panels(WhiteWines,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
# Load all of the packages that you end up using in your analysis in this code
# chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk. This
# prevents the code from displaying in the knitted HTML output. You should set
# echo=FALSE for all code chunks in your file, unless it makes sense for your
# report to show the code that generated a particular plot.
# The other parameters for "message" and "warning" should also be set to FALSE
# for other code chunks once you have verified that each plot comes out as you
# want it to. This will clean up the flow of your report.
#install.packages('GGally')
#install.packages('scales')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape')
#install.packages('plyr')
library(ggplot2)
library(GGally)
library(scales)
# Load the Data
WhiteWines <- read.csv('wineQualityWhites.csv')
dim(WhiteWines)
names(WhiteWines)
head(WhiteWines,n=10)
summary(WhiteWines)
WineQuality <- table(WhiteWines$quality)
barplot(WineQuality, main="Wine Quality Distribution", xlab="Number of Wines")
qplot(x = alcohol, data = WhiteWines)
summary(WhiteWines$alcohol)
qplot(x = residual.sugar, data = WhiteWines)
summary(WhiteWines$residual.sugar)
length(WhiteWines[(WhiteWines$residual.sugar < 1),]$residual.sugar)
length(WhiteWines[(WhiteWines$residual.sugar > 45),]$residual.sugar)
qplot(x = total.sulfur.dioxide, data = WhiteWines)
summary(WhiteWines$total.sulfur.dioxide)
length(WhiteWines[(WhiteWines$total.sulfur.dioxide > 50),]$total.sulfur.dioxide)/length(WhiteWines$total.sulfur.dioxide)
qplot(x = free.sulfur.dioxide, data = WhiteWines)
summary(WhiteWines$free.sulfur.dioxide)
qplot(x=pH, data=WhiteWines)
summary(WhiteWines$pH)
qplot(x=density,data=WhiteWines)
summary(WhiteWines$density)
qplot(x=chlorides,data=WhiteWines)
summary(WhiteWines$chlorides)
qplot(x=sulphates,data=WhiteWines)
summary(WhiteWines$sulphates)
qplot(x=fixed.acidity,data=WhiteWines)
summary(WhiteWines$fixed.acidity)
qplot(x=volatile.acidity,data=WhiteWines)
summary(WhiteWines$volatile.acidity)
qplot(x=citric.acid,data=WhiteWines)
summary(WhiteWines$citric.acid)
WhiteWines$acid <- WhiteWines$citric.acid + WhiteWines$fixed.acidity + WhiteWines$volatile.acidity
qplot(x=acid,data=WhiteWines)
summary(WhiteWines$acid)
library(psych)
pairs.panels(WhiteWines,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
round(WhiteWines,2)
correlation_matrix <- cor(WhiteWines)
round(correlation_matrix,2)
correlation_matrix$quality
correlation_matrix[1]
correlation_matrix[1,]
correlation_matrix[12,]
correlation_matrix[13,]
correlation_matrix[13,]
sort(correlation_matrix[13,])
sort(correlation_matrix[13,],-1)
sort(correlation_matrix[13,])
ggplot(aes(x = quality , y = alcohol))
gqplot(aes(x = quality , y = alcohol))
ggplot(aes(x = quality , y = alcohol))
ggplot(aes(x = quality , y = alcohol),data = WhiteWines)
ggplot(aes(x = quality , y = alcohol),data = WhiteWines)
ggplot(aes(x = quality , y = alcohol),data = WhiteWines + geom_boxplot())
ggplot(aes(x = quality , y = alcohol),data = WhiteWines) + geom_boxplot()
ggplot(aes(x = quality , y = alcohol),data = WhiteWines) + geom_point()
_boxplot
_point
ggplot(aes(x = quality , y = alcohol),data = WhiteWines) + geom_point()
_boxplot
ggplot(aes(x = quality , y = alcohol),data = WhiteWines) + geom_boxplot()
WhiteWines$Qualitycat<-cut(WhiteWines$quality, seq(0,9,3))
ggplot(aes(x = Qualitycat, y = alcohol),data = WhiteWines) + geom_boxplot()
summary(QualitycatAndAlcohol)
QualitycatAndAlcohol <- table(WhiteWines$Qualitycat, WhiteWines$alcohol)
summary(QualitycatAndAlcohol)
QualitycatAndAlcohol
tappply(WhiteWines$Qualitycat, WhiteWines$alcohol, summary)
tappply(WhiteWines$Qualitycat, WhiteWines$alcohol, summary)
tapply(WhiteWines$Qualitycat, WhiteWines$alcohol, summary)
tapply(WhiteWines$alcohol,WhiteWines$Qualitycat, summary)
WhiteWines$Qualitycat<-cut(WhiteWines$quality, seq(0,10,2.5))
ggplot(aes(x = Qualitycat, y = alcohol),data = WhiteWines) + geom_boxplot()
tapply(WhiteWines$alcohol,WhiteWines$Qualitycat, summary)
tapply(WhiteWines$alcohol,WhiteWines$Qualitycat, summary)
correlation_matrix <- cor(WhiteWines)
ggplot(aes(x = quality, y = alcohol),data = WhiteWines) + geom_point()
ggplot(aes(x = quality/2.5, y = alcohol),data = WhiteWines) + geom_point()
ggplot(aes(x = quality/2.5, y = alcohol),data = WhiteWines) + geom_point() + lm()
ggplot(aes(x = quality/2.5, y = alcohol),data = WhiteWines) + geom_point() + stat_smooth(method="lm")
ggplot(aes(x = Qualitycat, y = -density),data = WhiteWines) + geom_boxplot()
ggplot(aes(x = Qualitycat, y = -density),data = WhiteWines) + geom_boxplot(color = '#F79420'') +
ggplot(aes(x = Qualitycat, y = -density),data = WhiteWines) + geom_boxplot(color = '#F79420'')
ggplot(aes(x = Qualitycat, y = -density),data = WhiteWines) + geom_boxplot(color = '#F79420')
ggplot(aes(x = Qualitycat, y = -density),data = WhiteWines) + geom_boxplot(color = '#F79420')
+ scale_y_continuous(lim = c(0,qualile(WhiteWines$density,0.99)))
ggplot(aes(x = Qualitycat, y = -density),data = WhiteWines) + geom_boxplot(color = '#F79420')
+ scale_y_continuous(lim = c(0,quatile(WhiteWines$density,0.99)))
ggplot(aes(x = Qualitycat, y = -density),data = WhiteWines) + geom_boxplot(color = '#F79420')
+ scale_y_continuous(lim = c(0,quantile(WhiteWines$density,0.99)))
ggplot(aes(x = Qualitycat, y = -density),data = WhiteWines) + geom_boxplot(color = '#F79420')
+ scale_y_continuous(lim = c(0,quantile(WhiteWines$density,0.98)))
ggplot(aes(x = Qualitycat, y = density),data = WhiteWines) + geom_boxplot(color = '#F79420')
+ scale_y_continuous(lim = c(0,quantile(WhiteWines$density,0.98)))
ggplot(aes(x = Qualitycat, y = log10(density)),data = WhiteWines) + geom_boxplot(color = '#F79420')
+ scale_y_continuous(lim = c(0,quantile(WhiteWines$density,0.98)))
ggplot(aes(x = Qualitycat, y = log10(density)),data = WhiteWines) + geom_boxplot(color = '#F79420'))
ggplot(aes(x = Qualitycat, y = log10(density)),data = WhiteWines) + geom_boxplot(color = '#F79420')
ggplot(aes(x = Qualitycat, y = sqrt(log10(density))),data = WhiteWines) + geom_boxplot(color = '#F79420')
ggplot(aes(x = Qualitycat, y = sqrt(density),data = WhiteWines) + geom_boxplot(color = '#F79420')
ggplot(aes(x = Qualitycat, y = log10(density)),data = WhiteWines) + geom_boxplot(color = '#F79420')
ggplot(aes(x = Qualitycat, y = density),data = WhiteWines) + geom_boxplot(color = '#F79420')
tapply(WhiteWines$density,WhiteWines$Qualitycat, summary)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(aes(x = Qualitycat, y = chrolides),data = WhiteWines) + geom_boxplot(color = '#F79420')
ggplot(aes(x = Qualitycat, y = chorlides),data = WhiteWines) + geom_boxplot(color = '#F79420')
ggplot(aes(x = Qualitycat, y = chlorides),data = WhiteWines) + geom_boxplot(color = '#F79420')
ggplot(aes(x = Qualitycat, y = chlorides),data = WhiteWines) + geom_boxplot(color = '#F79420')
library(psych)
pairs.panels(WhiteWines,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
WhiteWines$Qualitycat<-cut(WhiteWines$quality, seq(0,10,2.5))
ggplot(aes(x = Qualitycat, y = alcohol),data = WhiteWines) + geom_boxplot()
tapply(WhiteWines$alcohol,WhiteWines$Qualitycat, summary)
ggplot(aes(x = Qualitycat, y = density),data = WhiteWines) + geom_boxplot(color = '#F79420')
tapply(WhiteWines$density,WhiteWines$Qualitycat, summary)
ggplot(aes(x = Qualitycat, y = chlorides),data = WhiteWines) + geom_boxplot(color = '#F79420')
ggplot(aes(x = Quality, y = alcohol),data = WhiteWines) + geom_boxplot()
ggplot(aes(x = quality, y = alcohol),data = WhiteWines) + geom_boxplot()
ggplot(aes(x = quality, y = alcohol),data = WhiteWines) + geom_boxplot() + geom_smooth(method = 'lm')
source('~/.active-rstudio-document', echo=TRUE)
ggplot(aes(x = Qualitycat, y = chlorides),data = WhiteWines) + geom_boxplot(color = '#F79420')
ggplot(aes(x = Qualitycat, y = chlorides),data = WhiteWines) + geom_boxplot(color = '#F79420')
ggplot(aes(x = Qualitycat, y = alcohol),data = WhiteWines) + geom_boxplot()
WhiteWines$Qualitycat<-cut(WhiteWines$quality, seq(0,10,2.5))
ggplot(aes(x = Qualitycat, y = alcohol),data = WhiteWines) + geom_boxplot()
correlation_matrix <- cor(WhiteWines)
ggplot(aes(y = alcohol,x = quality),data = WhiteWines) + geom_boxplot()
ggplot(aes(y = alcohol,group = quality),data = WhiteWines) + geom_boxplot()
x
x
ggplot(aes(y = alcohol,x = quality),data = WhiteWines) + geom_boxplot()
WhiteWines$Qualitycat<-as.factor(WhiteWines$quality)
ggplot(aes(y = alcohol,x = QualityCat),data = WhiteWines) + geom_boxplot()
ggplot(aes(y = alcohol,x = Qualitycat),data = WhiteWines) + geom_boxplot()
tapply(WhiteWines$alcohol,WhiteWines$Qualitycat, summary)
ggplot(aes(x = Qualitycat, y = density),data = WhiteWines) + geom_boxplot(color = '#F79420')
source('~/.active-rstudio-document', echo=TRUE)
ggplot(aes(y = alcohol,x = Qualitycat),data = WhiteWines) + geom_boxplot() + geom_smooth(method = 'lm')
WhiteWines$Qualitycat<-as.factor(WhiteWines$quality)
ggplot(aes(y = alcohol,x = Qualitycat),data = WhiteWines) + geom_boxplot() + geom_smooth(method = 'lm')
tapply(WhiteWines$density,WhiteWines$Qualitycat, summary)
correlation_matrix <- cor(WhiteWines)
